class Uv < Formula
  desc "Extremely fast Python package installer and resolver, written in Rust"
  homepage "https://github.com/astral-sh/uv"
  url "https://github.com/astral-sh/uv/archive/refs/tags/0.1.44.tar.gz"
  sha256 "83bde98723102af630755de3a672b21e070acdc51e2037aa4a6ed108a568f421"
  license any_of: ["Apache-2.0", "MIT"]
  head "https://github.com/astral-sh/uv.git", branch: "main"

  bottle do
    sha256 cellar: :any,                 arm64_sonoma:   "96ee60482c0e14ff14c811d1f3612af54e76e7e8d318f036db7d2a9d5652ad1f"
    sha256 cellar: :any,                 arm64_ventura:  "5066c34f07e7176f5690afa02e7e13d04752e8610a4e574c4ac722a1ddf86dac"
    sha256 cellar: :any,                 arm64_monterey: "0e5f8ecd6968066f07f642080655761ba5e094b467c0fae654229f6d08efd2f0"
    sha256 cellar: :any,                 sonoma:         "c5f7e0d81bf6a55b5abb64768f05419a3cee7bec4a9ba6442e8413008ff9f761"
    sha256 cellar: :any,                 ventura:        "29640b5120547bfa03e51386de9c10f2618edc8107b87531f23eca4c7b9efb02"
    sha256 cellar: :any,                 monterey:       "069d103e565b8188b18b9647009b9dd4b927af572f24018d46a77664402ea4a2"
    sha256 cellar: :any_skip_relocation, x86_64_linux:   "75dc0b62d613a39e5aab130b401b9f05ad12957de05b3bbc5fc0a6225caf5559"
  end

  depends_on "pkg-config" => :build
  depends_on "rust" => :build
  depends_on "libgit2"
  depends_on "openssl@3"

  uses_from_macos "python" => :test

  on_linux do
    # On macOS, bzip2-sys will use the bundled lib as it cannot find the system or brew lib.
    # We only ship bzip2.pc on Linux which bzip2-sys needs to find library.
    depends_on "bzip2"
  end

  def install
    ENV["LIBGIT2_NO_VENDOR"] = "1"

    # Ensure that the `openssl` crate picks up the intended library.
    ENV["OPENSSL_DIR"] = Formula["openssl@3"].opt_prefix
    ENV["OPENSSL_NO_VENDOR"] = "1"

    system "cargo", "install", "--no-default-features", *std_cargo_args(path: "crates/uv")
    generate_completions_from_executable(bin/"uv", "generate-shell-completion")
  end

  def check_binary_linkage(binary, library)
    binary.dynamically_linked_libraries.any? do |dll|
      next false unless dll.start_with?(HOMEBREW_PREFIX.to_s)

      File.realpath(dll) == File.realpath(library)
    end
  end

  test do
    (testpath/"requirements.in").write <<~EOS
      requests
    EOS

    compiled = shell_output("#{bin}/uv pip compile -q requirements.in")
    assert_match "This file was autogenerated by uv", compiled
    assert_match "# via requests", compiled

    [
      Formula["libgit2"].opt_lib/shared_library("libgit2"),
      Formula["openssl@3"].opt_lib/shared_library("libssl"),
      Formula["openssl@3"].opt_lib/shared_library("libcrypto"),
    ].each do |library|
      assert check_binary_linkage(bin/"uv", library),
             "No linkage with #{library.basename}! Cargo is likely using a vendored version."
    end
  end
end
